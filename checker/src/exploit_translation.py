import string
from collections import defaultdict
import re
from Crypto.Cipher import ChaCha20
from typing import ByteString, List



PER_LETTER = 4096 // 26

def create_word_arr(text: str) -> List[str]:
    words = [w.strip() for w in text.splitlines() if w.strip()]
    groups: dict[str, List[str]] = defaultdict(list)
    for w in words:
        ch = w[0].lower()
        if ch in string.ascii_lowercase:
            groups[ch].append(w)

    arr: List[str] = []
    used: set[str] = set()

    for letter in string.ascii_lowercase:
        bucket = groups.get(letter, [])
        if not bucket:
            continue 

        count = 0
        for w in bucket:
            if w not in used:
                arr.append(w)
                used.add(w)
                count += 1
                if count == PER_LETTER:
                    break

    for w in words:
        if len(arr) == 4096:
            break
        if w not in used:
            arr.append(w)
            used.add(w)

    if len(arr) != 4096:
        raise ValueError(f"Only {len(arr)} unique words available—need 4096")
    
    
    return arr

def extract_vtt_words(vtt_text: str) -> list[str]:
    words = []

    timestamp_re = re.compile(r'^\d{2}:\d{2}:\d{2}\.\d{3}\s+-->\s+\d{2}:\d{2}:\d{2}\.\d{3}$')
    
    for line in vtt_text.splitlines():
        line = line.strip()

        if not line or line.isdigit() or timestamp_re.match(line) or line == "WEBVTT":
            continue
        words.extend(line.split())
    
    return words

def create_inverse_dict(word_list:list) -> dict:
    dict = {}
    for i, word in enumerate(word_list):
        dict[word] = i
    return dict

def get_indices(words: list[str], dicti: dict) ->list[int]:
    for word in words:
        if word not in dicti:
            raise ValueError(f"Word '{word}' not found in dictionary")
    return [dicti[word] for word in words]



def unpack_indices(indices: list[int]) -> bytes:

    bits = 0
    bitcount = 0
    out = []

    for idx in indices:
        bits = (bits << 12) | idx
        bitcount += 12
        while bitcount >= 8:
            bitcount -= 8
            out.append((bits >> bitcount) & 0xFF)

    pad = bitcount  
    total_bits = len(indices) * 12
    orig_len   = (total_bits - pad) // 8
    
    print(f"Out is {out} with indices {indices}")
    print(f"Total bits: {total_bits}, Pad size: {pad}, Original length: {orig_len}")
    print(f"total % 12: {total_bits % 12}, pad % 8: {total_bits % 8}")
    
    if out[-1] == 0:
        out.pop()
    
    

    return bytes(out[:orig_len])



class ChaCha20Rng:
    def __init__(self, duration: float):
        ms = int(round(duration * 1000))
        if ms == 0:
            ms = 1
        key = ms.to_bytes(8, 'little') + b'\x00'*24
        self.cipher = ChaCha20.new(key=key, nonce=b'\x00'*8)

    def next_u64(self) -> int:
        block = self.cipher.encrypt(b'\x00'*8)
        return int.from_bytes(block, 'little')

def get_blob(blob: ByteString, duration: float) -> bytes:
    rng = ChaCha20Rng(duration)
    out = bytearray(len(blob))
    for i, b in enumerate(blob):
        full = rng.next_u64()
        byte = full & 0xFF
        print(f"Full: {full:#018x}, keystream byte: {byte:#04x}")
        print(f"Byte {i}: {b:#04x} ^ {byte:#04x} = {b ^ byte:#04x}")
        out[i] = b ^ byte
    return bytes(out)


def full_exploit_for_shorts(duration: float, vtt) -> str:
    with open("spanish_words.txt", encoding="utf-8") as f:
        raw = f.read()
    codebook = create_word_arr(raw)

    words = extract_vtt_words(vtt)
    dictionary = create_inverse_dict(codebook)
    indices = get_indices(words, dictionary)
    s = get_blob(unpack_indices(indices), duration)
    return s.decode('utf-8')

result = "@++++++++[>+++++++++>+++++++++++++>++++++++>+++++>+++++++>+++++++++++++++>++++++++++>+++++++++++++>++++++++>++++++++++>++++++<<<<<<<<<<<-]>---.>>>>>>--.+.-.++++.>+++.>+++.>>-----.<<--.<<++++++.-.++.<<--.<<<<+++.>>>>>.>>>>+.<<-------.<----.++.>>+.<--.<<<<<<+++.>>>>>+.>++++.>>>+++++.<<<<<--------.>>>+.>---.<<<<--.++++++++++++.>>>>--.<+++.<<--.>+.<<<--.+++++.<<<++++.++.>>>>>>-----.>>>.<<<-.>>>++++.<<----.<<<<<<<---.<.++++++++++.>>>>>>>++.>>>+.<<<<++++.>+++++++.>>>----.@"

cont = """
WEBVTT

1
00:00:00.000 --> 00:00:00.880
querencioso vagar saboreo abastecer labradoril abarrotería valaco habituación Pablo facial quedo caballillo abayada cabello pacotillera gachó washingtoniano queratosis ebúrneo observacional vacilante valedora sabrimiento radiactividad abaratar web jácaro caballochupa saboyano observable valencia abipona abandonada jabeca machaqueo racel obsoleta vagarosa vaciador zafio za ibaguereña ubajay kinésica ibis abalaustrado galaicoportuguesa rabadilla daguerrotipar gafear facionado jabonería na kurdo cabezudo ultraderechista labiado yaicuaje icorosa vacacionista identificativo jacapa ultrarrojo

2
00:00:00.880 --> 00:00:01.760
facinerosa q macal bacteriólogo rábico pachulí gacetable tablado babiano machera zacatera macarronea nacional tabernero rabo vahído dalle w lacrado quebequense quebradora bachicha hacedera racero yacuibeña kilocaloría kan rabihorcado gacetillero nacional ecosistémico habitáculo echona labrantío abanquino economización labihendida abobamiento aberrar rabalera xenismo gábata ideográfica ecuable radal ultrajadora pachotero babilonio tabique ablandativo galafate tabulador zaina abogacil tablada hablador rabera obispar idear laboriosamente zagalona sabacuante pachón

3
00:00:01.760 --> 00:00:02.640
abate quemada tablero abocardamiento abestiada ectodérmica pagamiento rabínica idealidad vaharada labradero tabor watt ebullómetro gachó abolladura machimbrado zacatecana xola cabezcaída ulcerativo abietíneo babaco abarraganarse abada ideal laborable jactancioso quebrandosa zajarí pacayar jaca nacionalcatólico laboralista ectropión vafoso yatista abiótico jacarear macabra nagualismo galana bachiller vadosa yatay caballeril ictiología economización sabina fabricante lacerado vaguemaestre quebrandosa ultimadora obsolescente tacada economización obediente backstage ecléctico yeso lactancia idiolecto

4
00:00:02.640 --> 00:00:03.520
lacrar gago babydoll jabonar abanda vaciada vahído cabello yegüerizo quelato sabino faceciosa uebos ultracorrección dacriocistitis uced abarrajar racimo ulano abaldonar hábito xilema macaca obsolescencia abogadil macheteadera ictiosis fachar echada ea vahaje sabidillo tachar radiar abonador hacendar yatrogenia pagador gacetillera facero machota jabardo baceta macaurel abestiada tabalario macaco p nabo cabaré kárate daguerrotipia zaherir abarque zabuquear tabarrera abaniqueo babosa ideador vadosa rabuda iberorrománico zabazoque

5
00:00:03.520 --> 00:00:04.400
xocoatole zaga vagarosidad abandonar tabardete obradora tabilla pacedera xenoglosia abejar pacana jabalconar fachendear abietíneo galantear jabonería idealmente abetunar sabiola zagalejo tachadura xilógrafa abollonar valar gaitero iconicidad sablero eclesiástica jabonería tabernizado radicalización tacamaca aborricar ulua fabricación xérico obrepticia abia caballochupa obradera xilofonista ebonita vajear machetazo abacorar racionalismo rabicana babuino pacae sabidillo jadeante paganía macaquear quemacocos ecotoxicología xenófilo jacerina jachón hagiónimo xilófago machorra xola


"""
if __name__ == "__main__":
    if result == full_exploit_for_shorts(4.40,cont):
        print("Nice")
    pass